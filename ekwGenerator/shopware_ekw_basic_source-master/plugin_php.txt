<?php

namespace [::plugin_name::];

use Shopware\Components\Model\ModelManager;
use Shopware\Components\Plugin\Context\InstallContext;
use Shopware\Components\Plugin\Context\UninstallContext;
use Shopware\Models\Emotion\Library\Component;
use Shopware\Models\Plugin\Plugin;

/**
 * Class [::plugin_name::]
 * @package [::plugin_name::]
 */
class [::plugin_name::] extends \Shopware\Components\Plugin
{

    /**
     * @param InstallContext $context
     * @throws \Doctrine\ORM\OptimisticLockException
     */
    public function install(InstallContext $context)
    {
        $component = $this->createEmotionComponent($context->getPlugin(), [
            'name' => '[::element_name::]',
            'xtype' => 'emotion-components-base',
            'template' => '[::element_template::]',
            'cls' => '[::element_cls::]',
            'description' => '[::element_desc::]'
        ]);

        /** @var ModelManager $em */
        $em = $this->container->get('models');
        $em->persist($component);
        $em->flush();

        $context->scheduleClearCache(InstallContext::CACHE_LIST_ALL);
    }

    /**
     * @param UninstallContext $context
     * @throws \Doctrine\ORM\OptimisticLockException
     */
    public function uninstall(UninstallContext $context)
    {
        $context->scheduleClearCache(UninstallContext::CACHE_LIST_ALL);
    }

    /**
     * @param $options
     * @param Plugin $pluginModel
     * @return Component
     */
    protected function createEmotionComponent(Plugin $pluginModel, $options)
    {
        /** @var ModelManager $em */
        $em = $this->container->get('models');

        // if a component with this name already exists for this plugin, use that
        $component = $em->getRepository(Component::class)->findOneBy([
            'name' => $options['name'],
            'pluginId' => $pluginModel->getId()
        ]);

        // else: create a new component
        if (!$component) {
            $component = new Component();
        }

        $component->fromArray($options);

        $component->setPluginId($pluginModel->getId());
        $component->setPlugin($pluginModel);

        return $component;
    }
}
